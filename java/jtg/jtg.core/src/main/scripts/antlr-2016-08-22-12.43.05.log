2016-08-22 12:43:05:492 grammar LogManager.java:49 before: (COMBINED_GRAMMAR JavaTemplateGrammar (@ header {

package org.edgo.jtg.core.grammar;

import org.edgo.jtg.core.model.ParsedUnit;
import antlr.TokenStreamSelector;

}) (OPTIONS (= tokenVocab TargetLexer)) (@ lexer members {
//    private ParsedUnit unit;

    private TokenStreamSelector selector;
    
    public TokenStreamSelector getSelector() {
        return selector;
    }
    
    public void setSelector(TokenStreamSelector selector) {
        this.selector = selector;
    }
}) (@ parser members {
    private ParsedUnit unit;
}) (RULES (RULE ASSIGN (BLOCK (ALT '='))) (RULE MACROCODE_END (BLOCK (ALT '#>' {
		selector.push("targetcode");
	}))) (RULE MACROCODE (BLOCK (ALT (+ (BLOCK (ALT '\n' { newline(); }) (ALT { LA(2) != '>' }? '#') (ALT (~ (SET '#' '\n')))))))) (RULE DIRECTIVE_CMD_TEMPLATE (BLOCK (ALT 'codeTemplate'))) (RULE DIRECTIVE_CMD_PROPERTY (BLOCK (ALT 'property'))) (RULE DIRECTIVE_CMD_JAR (BLOCK (ALT 'jar'))) (RULE DIRECTIVE_CMD_IMPORT (BLOCK (ALT 'import'))) (RULE DIRECTIVE_CMD_INCLUDE (BLOCK (ALT 'include'))) (RULE DIRECTIVE_CMD_EXTENDS (BLOCK (ALT 'extends'))) (RULE DIRECTIVE_ATTR_LANGUAGE (BLOCK (ALT 'language'))) (RULE DIRECTIVE_ATTR_TARGET_LANGUAGE (BLOCK (ALT 'targetLanguage'))) (RULE DIRECTIVE_ATTR_DESCRIPTION (BLOCK (ALT 'description'))) (RULE DIRECTIVE_ATTR_NAME (BLOCK (ALT 'name'))) (RULE DIRECTIVE_ATTR_FILE (BLOCK (ALT 'file'))) (RULE DIRECTIVE_ATTR_ARG (BLOCK (ALT 'arg'))) (RULE DIRECTIVE_ATTR_PARAMS (BLOCK (ALT 'params'))) (RULE DIRECTIVE_ATTR_PARENT (BLOCK (ALT 'parent'))) (RULE DIRECTIVE_ATTR_TYPE (BLOCK (ALT 'type'))) (RULE DIRECTIVE_ATTR_CATEGORY (BLOCK (ALT 'category'))) (RULE STRING_VALUE (BLOCK (ALT '"' (* (BLOCK (ALT (~ (SET '"' '\\' '\r' '\n'))) (ALT '\\' (BLOCK (ALT '"') (ALT '\\'))))) '"'))) (RULE WS (BLOCK (ALT (BLOCK (ALT ' ') (ALT '\t') (ALT '\n' { newline(); }) (ALT '\r')) { skip(); }))) (RULE template (@ init {
		this.unit = unit;
	}) (BLOCK (ALT directive_template (* (BLOCK (ALT directive_jar) (ALT directive_property) (ALT directive_import) (ALT directive_extends))) (+ (BLOCK (ALT script) (ALT placeholder) (ALT directive_include) (ALT macrocode) (ALT comment) (ALT { LA(1) != EOF }? targetcode))) EOF))) (RULE directive_template (@ init {
		String language;
		String targetlanguage;
	}) (BLOCK (ALT DIRECTIVE_BEGIN (= v DIRECTIVE_CMD_TEMPLATE) (= language directive_attr_language) (= targetlanguage directive_attr_target_language) (? (BLOCK (ALT directive_attr_description))) MACROCODE_END (? (BLOCK (ALT WS))) {
		unit.setMacroLang(language);
	  }))) (RULE directive_import (@ init {
		String ns;
	}) (BLOCK (ALT DIRECTIVE_BEGIN (= v DIRECTIVE_CMD_IMPORT) (= ns directive_attr_name) MACROCODE_END (? (BLOCK (ALT WS))) {
		unit.directiveImport(ns, v.getLine()); 
	}))) (RULE directive_include (@ init {
		String file;
		String arg = null;
		String params = null;
	}) (BLOCK (ALT DIRECTIVE_BEGIN (= v DIRECTIVE_CMD_INCLUDE) (= file directive_attr_file) (? (BLOCK (ALT (= params directive_attr_params)))) (? (BLOCK (ALT (= arg directive_attr_arg)))) MACROCODE_END (? (BLOCK (ALT WS))) {
		unit.addInclude(v, file, params, arg); 
	  }))) (RULE directive_extends (@ init {
		String parent;
	}) (BLOCK (ALT DIRECTIVE_BEGIN (= v DIRECTIVE_CMD_EXTENDS) (= parent directive_attr_parent) MACROCODE_END (? (BLOCK (ALT WS))) {
		unit.directiveExtends(parent, v.getLine()); 
	}))) (RULE directive_jar (@ init {
		String name;
	}) (BLOCK (ALT DIRECTIVE_BEGIN (= v DIRECTIVE_CMD_JAR) (= name directive_attr_name) MACROCODE_END (? (BLOCK (ALT WS))) {
		unit.directiveJar(name);
    }))) (RULE directive_property (@ init {
		String name;
		String type;
	}) (BLOCK (ALT DIRECTIVE_BEGIN (= v DIRECTIVE_CMD_PROPERTY) (BLOCK (ALT (= name directive_attr_name) (= type directive_attr_type) (? (BLOCK (ALT directive_attr_category))) (? (BLOCK (ALT directive_attr_description))))) MACROCODE_END (? (BLOCK (ALT WS))) {
		unit.directiveArguments(name, type, v.getLine());
	  }))) (RULE directive_attr_language (returns String language) (@ init {
		@language = "";
	}) (BLOCK (ALT DIRECTIVE_ATTR_LANGUAGE (= lang directive_attr) { @language = lang; }))) (RULE directive_attr_target_language (returns String language) (@ init {
		@language = "";
	}) (BLOCK (ALT DIRECTIVE_ATTR_TARGET_LANGUAGE (= lang directive_attr) { @language = lang; }))) (RULE directive_attr_description (@ init {
		String attr;
	}) (BLOCK (ALT DIRECTIVE_ATTR_DESCRIPTION (= attr directive_attr)))) (RULE directive_attr_name (returns String name) (@ init {
		@name = "";
	}) (BLOCK (ALT DIRECTIVE_ATTR_NAME (= n directive_attr) { @name = n; }))) (RULE directive_attr_parent (returns String parent) (@ init {
		@parent = "";
	}) (BLOCK (ALT DIRECTIVE_ATTR_PARENT (= p directive_attr) { @parent = p; }))) (RULE directive_attr_type (returns String type) (@ init {
		@type = "";
	}) (BLOCK (ALT DIRECTIVE_ATTR_TYPE (= t directive_attr) { @type = t; }))) (RULE directive_attr_category (@ init {
		String attr;
	}) (BLOCK (ALT DIRECTIVE_ATTR_CATEGORY (= attr directive_attr)))) (RULE directive_attr_file (returns String file) (@ init {
		@file = "";
	}) (BLOCK (ALT DIRECTIVE_ATTR_FILE (= f directive_attr) { @file = f; }))) (RULE directive_attr_arg (returns String arg) (@ init {
		@arg = "";
	}) (BLOCK (ALT DIRECTIVE_ATTR_ARG (= a directive_attr) { @arg = a; }))) (RULE directive_attr_params (returns String params) (@ init {
		@params = "";
	}) (BLOCK (ALT DIRECTIVE_ATTR_PARAMS (= p directive_attr) { @params = p; }))) (RULE directive_attr (returns String value) (@ init {
		@value = "";
	}) (BLOCK (ALT ASSIGN (= v STRING_VALUE) { 
		@value = v.getText();
        if (value.startsWith("\""))
            @value = value.substring(1);
        if (value.endsWith("\""))
            @value = value.substring(0, value.length() - 1);
     }))) (RULE script (BLOCK (ALT SCRIPT_BEGIN MACROCODE_END (? (BLOCK (ALT WS))) (? (BLOCK (ALT (= v TARGETCODE) { 
		  unit.addScript(v); 
	    }))) SCRIPT_END MACROCODE_END (? (BLOCK (ALT WS))) {
	  }))) (RULE placeholder (BLOCK (ALT PLACEHOLDER_BEGIN (= v MACROCODE) MACROCODE_END {
		unit.addPlaceholder(v);
	}))) (RULE macrocode (BLOCK (ALT MACROCODE_BEGIN (? (BLOCK (ALT (= v MACROCODE) { unit.addMacrocode(v); }))) MACROCODE_END {
	}))) (RULE comment (BLOCK (ALT COMMENT_BEGIN (? (BLOCK (ALT (= v MACROCODE)))) MACROCODE_END {
	}))) (RULE targetcode (BLOCK (ALT (? (BLOCK (ALT (= w WS)))) (? (BLOCK (ALT (= v TARGETCODE)))) {
			if (null != v)
			{
				if (null != w)
				{
					v.setText(w.getText() + v.getText());
					v.setLine(w.getLine());
				}
				unit.addTargetcode(v); 
			}
			else
			{
				if (null != w)
				{
					unit.addTargetcode(w); 
				}
			}
		})))))
2016-08-22 12:43:05:522 grammar LogManager.java:49 after: (COMBINED_GRAMMAR JavaTemplateGrammar (@ header {

package org.edgo.jtg.core.grammar;

import org.edgo.jtg.core.model.ParsedUnit;
import antlr.TokenStreamSelector;

}) (OPTIONS (= tokenVocab TargetLexer)) (@ lexer members {
//    private ParsedUnit unit;

    private TokenStreamSelector selector;
    
    public TokenStreamSelector getSelector() {
        return selector;
    }
    
    public void setSelector(TokenStreamSelector selector) {
        this.selector = selector;
    }
}) (@ parser members {
    private ParsedUnit unit;
}) (RULES (RULE ASSIGN (BLOCK (ALT '='))) (RULE MACROCODE_END (BLOCK (ALT '#>' {
		selector.push("targetcode");
	}))) (RULE MACROCODE (BLOCK (ALT (+ (BLOCK (ALT '\n' { newline(); }) (ALT { LA(2) != '>' }? '#') (ALT (~ (SET '#' '\n')))))))) (RULE DIRECTIVE_CMD_TEMPLATE (BLOCK (ALT 'codeTemplate'))) (RULE DIRECTIVE_CMD_PROPERTY (BLOCK (ALT 'property'))) (RULE DIRECTIVE_CMD_JAR (BLOCK (ALT 'jar'))) (RULE DIRECTIVE_CMD_IMPORT (BLOCK (ALT 'import'))) (RULE DIRECTIVE_CMD_INCLUDE (BLOCK (ALT 'include'))) (RULE DIRECTIVE_CMD_EXTENDS (BLOCK (ALT 'extends'))) (RULE DIRECTIVE_ATTR_LANGUAGE (BLOCK (ALT 'language'))) (RULE DIRECTIVE_ATTR_TARGET_LANGUAGE (BLOCK (ALT 'targetLanguage'))) (RULE DIRECTIVE_ATTR_DESCRIPTION (BLOCK (ALT 'description'))) (RULE DIRECTIVE_ATTR_NAME (BLOCK (ALT 'name'))) (RULE DIRECTIVE_ATTR_FILE (BLOCK (ALT 'file'))) (RULE DIRECTIVE_ATTR_ARG (BLOCK (ALT 'arg'))) (RULE DIRECTIVE_ATTR_PARAMS (BLOCK (ALT 'params'))) (RULE DIRECTIVE_ATTR_PARENT (BLOCK (ALT 'parent'))) (RULE DIRECTIVE_ATTR_TYPE (BLOCK (ALT 'type'))) (RULE DIRECTIVE_ATTR_CATEGORY (BLOCK (ALT 'category'))) (RULE STRING_VALUE (BLOCK (ALT '"' (* (BLOCK (ALT (~ (SET '"' '\\' '\r' '\n'))) (ALT '\\' (SET '"' '\\')))) '"'))) (RULE WS (BLOCK (ALT (BLOCK (ALT ' ') (ALT '\t') (ALT '\n' { newline(); }) (ALT '\r')) { skip(); }))) (RULE template (@ init {
		this.unit = unit;
	}) (BLOCK (ALT directive_template (* (BLOCK (ALT directive_jar) (ALT directive_property) (ALT directive_import) (ALT directive_extends))) (+ (BLOCK (ALT script) (ALT placeholder) (ALT directive_include) (ALT macrocode) (ALT comment) (ALT { LA(1) != EOF }? targetcode))) EOF))) (RULE directive_template (@ init {
		String language;
		String targetlanguage;
	}) (BLOCK (ALT DIRECTIVE_BEGIN (= v DIRECTIVE_CMD_TEMPLATE) (= language directive_attr_language) (= targetlanguage directive_attr_target_language) (? (BLOCK (ALT directive_attr_description))) MACROCODE_END (? (BLOCK (ALT WS))) {
		unit.setMacroLang(language);
	  }))) (RULE directive_import (@ init {
		String ns;
	}) (BLOCK (ALT DIRECTIVE_BEGIN (= v DIRECTIVE_CMD_IMPORT) (= ns directive_attr_name) MACROCODE_END (? (BLOCK (ALT WS))) {
		unit.directiveImport(ns, v.getLine()); 
	}))) (RULE directive_include (@ init {
		String file;
		String arg = null;
		String params = null;
	}) (BLOCK (ALT DIRECTIVE_BEGIN (= v DIRECTIVE_CMD_INCLUDE) (= file directive_attr_file) (? (BLOCK (ALT (= params directive_attr_params)))) (? (BLOCK (ALT (= arg directive_attr_arg)))) MACROCODE_END (? (BLOCK (ALT WS))) {
		unit.addInclude(v, file, params, arg); 
	  }))) (RULE directive_extends (@ init {
		String parent;
	}) (BLOCK (ALT DIRECTIVE_BEGIN (= v DIRECTIVE_CMD_EXTENDS) (= parent directive_attr_parent) MACROCODE_END (? (BLOCK (ALT WS))) {
		unit.directiveExtends(parent, v.getLine()); 
	}))) (RULE directive_jar (@ init {
		String name;
	}) (BLOCK (ALT DIRECTIVE_BEGIN (= v DIRECTIVE_CMD_JAR) (= name directive_attr_name) MACROCODE_END (? (BLOCK (ALT WS))) {
		unit.directiveJar(name);
    }))) (RULE directive_property (@ init {
		String name;
		String type;
	}) (BLOCK (ALT DIRECTIVE_BEGIN (= v DIRECTIVE_CMD_PROPERTY) (BLOCK (ALT (= name directive_attr_name) (= type directive_attr_type) (? (BLOCK (ALT directive_attr_category))) (? (BLOCK (ALT directive_attr_description))))) MACROCODE_END (? (BLOCK (ALT WS))) {
		unit.directiveArguments(name, type, v.getLine());
	  }))) (RULE directive_attr_language (returns String language) (@ init {
		@language = "";
	}) (BLOCK (ALT DIRECTIVE_ATTR_LANGUAGE (= lang directive_attr) { @language = lang; }))) (RULE directive_attr_target_language (returns String language) (@ init {
		@language = "";
	}) (BLOCK (ALT DIRECTIVE_ATTR_TARGET_LANGUAGE (= lang directive_attr) { @language = lang; }))) (RULE directive_attr_description (@ init {
		String attr;
	}) (BLOCK (ALT DIRECTIVE_ATTR_DESCRIPTION (= attr directive_attr)))) (RULE directive_attr_name (returns String name) (@ init {
		@name = "";
	}) (BLOCK (ALT DIRECTIVE_ATTR_NAME (= n directive_attr) { @name = n; }))) (RULE directive_attr_parent (returns String parent) (@ init {
		@parent = "";
	}) (BLOCK (ALT DIRECTIVE_ATTR_PARENT (= p directive_attr) { @parent = p; }))) (RULE directive_attr_type (returns String type) (@ init {
		@type = "";
	}) (BLOCK (ALT DIRECTIVE_ATTR_TYPE (= t directive_attr) { @type = t; }))) (RULE directive_attr_category (@ init {
		String attr;
	}) (BLOCK (ALT DIRECTIVE_ATTR_CATEGORY (= attr directive_attr)))) (RULE directive_attr_file (returns String file) (@ init {
		@file = "";
	}) (BLOCK (ALT DIRECTIVE_ATTR_FILE (= f directive_attr) { @file = f; }))) (RULE directive_attr_arg (returns String arg) (@ init {
		@arg = "";
	}) (BLOCK (ALT DIRECTIVE_ATTR_ARG (= a directive_attr) { @arg = a; }))) (RULE directive_attr_params (returns String params) (@ init {
		@params = "";
	}) (BLOCK (ALT DIRECTIVE_ATTR_PARAMS (= p directive_attr) { @params = p; }))) (RULE directive_attr (returns String value) (@ init {
		@value = "";
	}) (BLOCK (ALT ASSIGN (= v STRING_VALUE) { 
		@value = v.getText();
        if (value.startsWith("\""))
            @value = value.substring(1);
        if (value.endsWith("\""))
            @value = value.substring(0, value.length() - 1);
     }))) (RULE script (BLOCK (ALT SCRIPT_BEGIN MACROCODE_END (? (BLOCK (ALT WS))) (? (BLOCK (ALT (= v TARGETCODE) { 
		  unit.addScript(v); 
	    }))) SCRIPT_END MACROCODE_END (? (BLOCK (ALT WS))) {
	  }))) (RULE placeholder (BLOCK (ALT PLACEHOLDER_BEGIN (= v MACROCODE) MACROCODE_END {
		unit.addPlaceholder(v);
	}))) (RULE macrocode (BLOCK (ALT MACROCODE_BEGIN (? (BLOCK (ALT (= v MACROCODE) { unit.addMacrocode(v); }))) MACROCODE_END {
	}))) (RULE comment (BLOCK (ALT COMMENT_BEGIN (? (BLOCK (ALT (= v MACROCODE)))) MACROCODE_END {
	}))) (RULE targetcode (BLOCK (ALT (? (BLOCK (ALT (= w WS)))) (? (BLOCK (ALT (= v TARGETCODE)))) {
			if (null != v)
			{
				if (null != w)
				{
					v.setText(w.getText() + v.getText());
					v.setLine(w.getLine());
				}
				unit.addTargetcode(v); 
			}
			else
			{
				if (null != w)
				{
					unit.addTargetcode(w); 
				}
			}
		})))))
2016-08-22 12:43:05:550 grammar LogManager.java:49 after extract implicit lexer =(COMBINED_GRAMMAR JavaTemplateGrammar (@ header {

package org.edgo.jtg.core.grammar;

import org.edgo.jtg.core.model.ParsedUnit;
import antlr.TokenStreamSelector;

}) (OPTIONS (= tokenVocab TargetLexer)) (@ parser members {
    private ParsedUnit unit;
}) (RULES (RULE template (@ init {
		this.unit = unit;
	}) (BLOCK (ALT directive_template (* (BLOCK (ALT directive_jar) (ALT directive_property) (ALT directive_import) (ALT directive_extends))) (+ (BLOCK (ALT script) (ALT placeholder) (ALT directive_include) (ALT macrocode) (ALT comment) (ALT { LA(1) != EOF }? targetcode))) EOF))) (RULE directive_template (@ init {
		String language;
		String targetlanguage;
	}) (BLOCK (ALT DIRECTIVE_BEGIN (= v DIRECTIVE_CMD_TEMPLATE) (= language directive_attr_language) (= targetlanguage directive_attr_target_language) (? (BLOCK (ALT directive_attr_description))) MACROCODE_END (? (BLOCK (ALT WS))) {
		unit.setMacroLang(language);
	  }))) (RULE directive_import (@ init {
		String ns;
	}) (BLOCK (ALT DIRECTIVE_BEGIN (= v DIRECTIVE_CMD_IMPORT) (= ns directive_attr_name) MACROCODE_END (? (BLOCK (ALT WS))) {
		unit.directiveImport(ns, v.getLine()); 
	}))) (RULE directive_include (@ init {
		String file;
		String arg = null;
		String params = null;
	}) (BLOCK (ALT DIRECTIVE_BEGIN (= v DIRECTIVE_CMD_INCLUDE) (= file directive_attr_file) (? (BLOCK (ALT (= params directive_attr_params)))) (? (BLOCK (ALT (= arg directive_attr_arg)))) MACROCODE_END (? (BLOCK (ALT WS))) {
		unit.addInclude(v, file, params, arg); 
	  }))) (RULE directive_extends (@ init {
		String parent;
	}) (BLOCK (ALT DIRECTIVE_BEGIN (= v DIRECTIVE_CMD_EXTENDS) (= parent directive_attr_parent) MACROCODE_END (? (BLOCK (ALT WS))) {
		unit.directiveExtends(parent, v.getLine()); 
	}))) (RULE directive_jar (@ init {
		String name;
	}) (BLOCK (ALT DIRECTIVE_BEGIN (= v DIRECTIVE_CMD_JAR) (= name directive_attr_name) MACROCODE_END (? (BLOCK (ALT WS))) {
		unit.directiveJar(name);
    }))) (RULE directive_property (@ init {
		String name;
		String type;
	}) (BLOCK (ALT DIRECTIVE_BEGIN (= v DIRECTIVE_CMD_PROPERTY) (BLOCK (ALT (= name directive_attr_name) (= type directive_attr_type) (? (BLOCK (ALT directive_attr_category))) (? (BLOCK (ALT directive_attr_description))))) MACROCODE_END (? (BLOCK (ALT WS))) {
		unit.directiveArguments(name, type, v.getLine());
	  }))) (RULE directive_attr_language (returns String language) (@ init {
		@language = "";
	}) (BLOCK (ALT DIRECTIVE_ATTR_LANGUAGE (= lang directive_attr) { @language = lang; }))) (RULE directive_attr_target_language (returns String language) (@ init {
		@language = "";
	}) (BLOCK (ALT DIRECTIVE_ATTR_TARGET_LANGUAGE (= lang directive_attr) { @language = lang; }))) (RULE directive_attr_description (@ init {
		String attr;
	}) (BLOCK (ALT DIRECTIVE_ATTR_DESCRIPTION (= attr directive_attr)))) (RULE directive_attr_name (returns String name) (@ init {
		@name = "";
	}) (BLOCK (ALT DIRECTIVE_ATTR_NAME (= n directive_attr) { @name = n; }))) (RULE directive_attr_parent (returns String parent) (@ init {
		@parent = "";
	}) (BLOCK (ALT DIRECTIVE_ATTR_PARENT (= p directive_attr) { @parent = p; }))) (RULE directive_attr_type (returns String type) (@ init {
		@type = "";
	}) (BLOCK (ALT DIRECTIVE_ATTR_TYPE (= t directive_attr) { @type = t; }))) (RULE directive_attr_category (@ init {
		String attr;
	}) (BLOCK (ALT DIRECTIVE_ATTR_CATEGORY (= attr directive_attr)))) (RULE directive_attr_file (returns String file) (@ init {
		@file = "";
	}) (BLOCK (ALT DIRECTIVE_ATTR_FILE (= f directive_attr) { @file = f; }))) (RULE directive_attr_arg (returns String arg) (@ init {
		@arg = "";
	}) (BLOCK (ALT DIRECTIVE_ATTR_ARG (= a directive_attr) { @arg = a; }))) (RULE directive_attr_params (returns String params) (@ init {
		@params = "";
	}) (BLOCK (ALT DIRECTIVE_ATTR_PARAMS (= p directive_attr) { @params = p; }))) (RULE directive_attr (returns String value) (@ init {
		@value = "";
	}) (BLOCK (ALT ASSIGN (= v STRING_VALUE) { 
		@value = v.getText();
        if (value.startsWith("\""))
            @value = value.substring(1);
        if (value.endsWith("\""))
            @value = value.substring(0, value.length() - 1);
     }))) (RULE script (BLOCK (ALT SCRIPT_BEGIN MACROCODE_END (? (BLOCK (ALT WS))) (? (BLOCK (ALT (= v TARGETCODE) { 
		  unit.addScript(v); 
	    }))) SCRIPT_END MACROCODE_END (? (BLOCK (ALT WS))) {
	  }))) (RULE placeholder (BLOCK (ALT PLACEHOLDER_BEGIN (= v MACROCODE) MACROCODE_END {
		unit.addPlaceholder(v);
	}))) (RULE macrocode (BLOCK (ALT MACROCODE_BEGIN (? (BLOCK (ALT (= v MACROCODE) { unit.addMacrocode(v); }))) MACROCODE_END {
	}))) (RULE comment (BLOCK (ALT COMMENT_BEGIN (? (BLOCK (ALT (= v MACROCODE)))) MACROCODE_END {
	}))) (RULE targetcode (BLOCK (ALT (? (BLOCK (ALT (= w WS)))) (? (BLOCK (ALT (= v TARGETCODE)))) {
			if (null != v)
			{
				if (null != w)
				{
					v.setText(w.getText() + v.getText());
					v.setLine(w.getLine());
				}
				unit.addTargetcode(v); 
			}
			else
			{
				if (null != w)
				{
					unit.addTargetcode(w); 
				}
			}
		})))))
2016-08-22 12:43:05:550 grammar LogManager.java:49 lexer =(LEXER_GRAMMAR JavaTemplateGrammarLexer OPTIONS (@ header {

package org.edgo.jtg.core.grammar;

import org.edgo.jtg.core.model.ParsedUnit;
import antlr.TokenStreamSelector;

}) (@ lexer members {
//    private ParsedUnit unit;

    private TokenStreamSelector selector;
    
    public TokenStreamSelector getSelector() {
        return selector;
    }
    
    public void setSelector(TokenStreamSelector selector) {
        this.selector = selector;
    }
}) (@ parser members {
    private ParsedUnit unit;
}) (RULES (RULE ASSIGN (BLOCK (ALT '='))) (RULE MACROCODE_END (BLOCK (ALT '#>' {
		selector.push("targetcode");
	}))) (RULE MACROCODE (BLOCK (ALT (+ (BLOCK (ALT '\n' { newline(); }) (ALT { LA(2) != '>' }? '#') (ALT (~ (SET '#' '\n')))))))) (RULE DIRECTIVE_CMD_TEMPLATE (BLOCK (ALT 'codeTemplate'))) (RULE DIRECTIVE_CMD_PROPERTY (BLOCK (ALT 'property'))) (RULE DIRECTIVE_CMD_JAR (BLOCK (ALT 'jar'))) (RULE DIRECTIVE_CMD_IMPORT (BLOCK (ALT 'import'))) (RULE DIRECTIVE_CMD_INCLUDE (BLOCK (ALT 'include'))) (RULE DIRECTIVE_CMD_EXTENDS (BLOCK (ALT 'extends'))) (RULE DIRECTIVE_ATTR_LANGUAGE (BLOCK (ALT 'language'))) (RULE DIRECTIVE_ATTR_TARGET_LANGUAGE (BLOCK (ALT 'targetLanguage'))) (RULE DIRECTIVE_ATTR_DESCRIPTION (BLOCK (ALT 'description'))) (RULE DIRECTIVE_ATTR_NAME (BLOCK (ALT 'name'))) (RULE DIRECTIVE_ATTR_FILE (BLOCK (ALT 'file'))) (RULE DIRECTIVE_ATTR_ARG (BLOCK (ALT 'arg'))) (RULE DIRECTIVE_ATTR_PARAMS (BLOCK (ALT 'params'))) (RULE DIRECTIVE_ATTR_PARENT (BLOCK (ALT 'parent'))) (RULE DIRECTIVE_ATTR_TYPE (BLOCK (ALT 'type'))) (RULE DIRECTIVE_ATTR_CATEGORY (BLOCK (ALT 'category'))) (RULE STRING_VALUE (BLOCK (ALT '"' (* (BLOCK (ALT (~ (SET '"' '\\' '\r' '\n'))) (ALT '\\' (SET '"' '\\')))) '"'))) (RULE WS (BLOCK (ALT (BLOCK (ALT ' ') (ALT '\t') (ALT '\n' { newline(); }) (ALT '\r')) { skip(); })))))
2016-08-22 12:43:05:709 action-translator LogManager.java:49 translate 
//    private ParsedUnit unit;

    private TokenStreamSelector selector;
    
    public TokenStreamSelector getSelector() {
        return selector;
    }
    
    public void setSelector(TokenStreamSelector selector) {
        this.selector = selector;
    }

2016-08-22 12:43:05:710 action-translator LogManager.java:49 translate 

package org.edgo.jtg.core.grammar;

import org.edgo.jtg.core.model.ParsedUnit;
import antlr.TokenStreamSelector;


2016-08-22 12:43:05:721 action-translator LogManager.java:49 translate 
		selector.push("targetcode");
	
2016-08-22 12:43:05:721 action-translator LogManager.java:49 translate  newline(); 
2016-08-22 12:43:05:721 action-translator LogManager.java:49 translate  LA(2) != '>' 
2016-08-22 12:43:05:721 action-translator LogManager.java:49 translate  newline(); 
2016-08-22 12:43:05:721 action-translator LogManager.java:49 translate  skip(); 
2016-08-22 12:43:05:769 grammar LogManager.java:49 import PLACEHOLDER_BEGIN=1
2016-08-22 12:43:05:769 grammar LogManager.java:49 import DIRECTIVE_BEGIN=2
2016-08-22 12:43:05:769 grammar LogManager.java:49 import COMMENT_BEGIN=3
2016-08-22 12:43:05:769 grammar LogManager.java:49 import SCRIPT_BEGIN=4
2016-08-22 12:43:05:769 grammar LogManager.java:49 import SCRIPT_END=5
2016-08-22 12:43:05:769 grammar LogManager.java:49 import MACROCODE_BEGIN=6
2016-08-22 12:43:05:769 grammar LogManager.java:49 import WS=7
2016-08-22 12:43:05:769 grammar LogManager.java:49 import TARGETCODE=8
2016-08-22 12:43:05:769 grammar LogManager.java:49 import '<#='=1
2016-08-22 12:43:05:769 grammar LogManager.java:49 import '<#@'=2
2016-08-22 12:43:05:769 grammar LogManager.java:49 import '<#--'=3
2016-08-22 12:43:05:769 grammar LogManager.java:49 import '<#script'=4
2016-08-22 12:43:05:769 grammar LogManager.java:49 import '<#/script'=5
2016-08-22 12:43:05:770 grammar LogManager.java:49 tokens={PLACEHOLDER_BEGIN=1, DIRECTIVE_BEGIN=2, COMMENT_BEGIN=3, SCRIPT_BEGIN=4, SCRIPT_END=5, MACROCODE_BEGIN=6, WS=7, TARGETCODE=8, '<#='=1, '<#@'=2, '<#--'=3, '<#script'=4, '<#/script'=5}
2016-08-22 12:43:05:770 semantics LogManager.java:49 tokens={EOF=-1, ASSIGN=1, MACROCODE_END=2, MACROCODE=3, DIRECTIVE_CMD_TEMPLATE=4, DIRECTIVE_CMD_PROPERTY=5, DIRECTIVE_CMD_JAR=6, DIRECTIVE_CMD_IMPORT=7, DIRECTIVE_CMD_INCLUDE=8, DIRECTIVE_CMD_EXTENDS=9, DIRECTIVE_ATTR_LANGUAGE=10, DIRECTIVE_ATTR_TARGET_LANGUAGE=11, DIRECTIVE_ATTR_DESCRIPTION=12, DIRECTIVE_ATTR_NAME=13, DIRECTIVE_ATTR_FILE=14, DIRECTIVE_ATTR_ARG=15, DIRECTIVE_ATTR_PARAMS=16, DIRECTIVE_ATTR_PARENT=17, DIRECTIVE_ATTR_TYPE=18, DIRECTIVE_ATTR_CATEGORY=19, STRING_VALUE=20, WS=21, PLACEHOLDER_BEGIN=1, DIRECTIVE_BEGIN=2, COMMENT_BEGIN=3, SCRIPT_BEGIN=4, SCRIPT_END=5, MACROCODE_BEGIN=6, TARGETCODE=8}
2016-08-22 12:43:05:770 semantics LogManager.java:49 strings={'='=1, '#>'=2, 'codeTemplate'=4, 'property'=5, 'jar'=6, 'import'=7, 'include'=8, 'extends'=9, 'language'=10, 'targetLanguage'=11, 'description'=12, 'name'=13, 'file'=14, 'arg'=15, 'params'=16, 'parent'=17, 'type'=18, 'category'=19, '<#='=1, '<#@'=2, '<#--'=3, '<#script'=4, '<#/script'=5}
2016-08-22 12:43:05:779 LL1 LogManager.java:49 
DECISION 0 in rule template
2016-08-22 12:43:05:779 LL1 LogManager.java:49 look=[2, 2, 2, 2]
2016-08-22 12:43:05:779 LL1 LogManager.java:49 LL(1)? false
2016-08-22 12:43:05:779 LL1 LogManager.java:49 
DECISION 1 in rule template
2016-08-22 12:43:05:779 LL1 LogManager.java:49 look=[2, null]
2016-08-22 12:43:05:779 LL1 LogManager.java:49 LL(1)? false
2016-08-22 12:43:05:779 LL1 LogManager.java:49 
DECISION 2 in rule template
2016-08-22 12:43:05:779 LL1 LogManager.java:49 look=[4, 1, 2, 6, 3, null]
2016-08-22 12:43:05:779 LL1 LogManager.java:49 LL(1)? false
2016-08-22 12:43:05:779 LL1 LogManager.java:49 
DECISION 3 in rule template
2016-08-22 12:43:05:779 LL1 LogManager.java:49 look=[null, <EOF>]
2016-08-22 12:43:05:780 LL1 LogManager.java:49 LL(1)? false
2016-08-22 12:43:05:780 LL1 LogManager.java:49 
DECISION 4 in rule directive_template
2016-08-22 12:43:05:780 LL1 LogManager.java:49 look=[12, 2]
2016-08-22 12:43:05:780 LL1 LogManager.java:49 LL(1)? true
2016-08-22 12:43:05:780 LL1 LogManager.java:49 
DECISION 5 in rule directive_template
2016-08-22 12:43:05:780 LL1 LogManager.java:49 look=[21, null]
2016-08-22 12:43:05:780 LL1 LogManager.java:49 LL(1)? false
2016-08-22 12:43:05:780 LL1 LogManager.java:49 
DECISION 6 in rule directive_import
2016-08-22 12:43:05:780 LL1 LogManager.java:49 look=[21, null]
2016-08-22 12:43:05:780 LL1 LogManager.java:49 LL(1)? false
2016-08-22 12:43:05:780 LL1 LogManager.java:49 
DECISION 7 in rule directive_include
2016-08-22 12:43:05:780 LL1 LogManager.java:49 look=[16, {2, 15}]
2016-08-22 12:43:05:780 LL1 LogManager.java:49 LL(1)? true
2016-08-22 12:43:05:780 LL1 LogManager.java:49 
DECISION 8 in rule directive_include
2016-08-22 12:43:05:780 LL1 LogManager.java:49 look=[15, 2]
2016-08-22 12:43:05:780 LL1 LogManager.java:49 LL(1)? true
2016-08-22 12:43:05:780 LL1 LogManager.java:49 
DECISION 9 in rule directive_include
2016-08-22 12:43:05:780 LL1 LogManager.java:49 look=[21, null]
2016-08-22 12:43:05:780 LL1 LogManager.java:49 LL(1)? false
2016-08-22 12:43:05:780 LL1 LogManager.java:49 
DECISION 10 in rule directive_extends
2016-08-22 12:43:05:780 LL1 LogManager.java:49 look=[21, null]
2016-08-22 12:43:05:780 LL1 LogManager.java:49 LL(1)? false
2016-08-22 12:43:05:781 LL1 LogManager.java:49 
DECISION 11 in rule directive_jar
2016-08-22 12:43:05:781 LL1 LogManager.java:49 look=[21, null]
2016-08-22 12:43:05:781 LL1 LogManager.java:49 LL(1)? false
2016-08-22 12:43:05:781 LL1 LogManager.java:49 
DECISION 12 in rule directive_property
2016-08-22 12:43:05:781 LL1 LogManager.java:49 look=[19, {2, 12}]
2016-08-22 12:43:05:781 LL1 LogManager.java:49 LL(1)? true
2016-08-22 12:43:05:781 LL1 LogManager.java:49 
DECISION 13 in rule directive_property
2016-08-22 12:43:05:781 LL1 LogManager.java:49 look=[12, 2]
2016-08-22 12:43:05:781 LL1 LogManager.java:49 LL(1)? true
2016-08-22 12:43:05:781 LL1 LogManager.java:49 
DECISION 14 in rule directive_property
2016-08-22 12:43:05:781 LL1 LogManager.java:49 look=[21, null]
2016-08-22 12:43:05:781 LL1 LogManager.java:49 LL(1)? false
2016-08-22 12:43:05:781 LL1 LogManager.java:49 
DECISION 15 in rule script
2016-08-22 12:43:05:781 LL1 LogManager.java:49 look=[21, {5, 8}]
2016-08-22 12:43:05:781 LL1 LogManager.java:49 LL(1)? true
2016-08-22 12:43:05:781 LL1 LogManager.java:49 
DECISION 16 in rule script
2016-08-22 12:43:05:781 LL1 LogManager.java:49 look=[8, 5]
2016-08-22 12:43:05:781 LL1 LogManager.java:49 LL(1)? true
2016-08-22 12:43:05:781 LL1 LogManager.java:49 
DECISION 17 in rule script
2016-08-22 12:43:05:781 LL1 LogManager.java:49 look=[21, null]
2016-08-22 12:43:05:781 LL1 LogManager.java:49 LL(1)? false
2016-08-22 12:43:05:781 LL1 LogManager.java:49 
DECISION 18 in rule macrocode
2016-08-22 12:43:05:781 LL1 LogManager.java:49 look=[3, 2]
2016-08-22 12:43:05:781 LL1 LogManager.java:49 LL(1)? true
2016-08-22 12:43:05:781 LL1 LogManager.java:49 
DECISION 19 in rule comment
2016-08-22 12:43:05:781 LL1 LogManager.java:49 look=[3, 2]
2016-08-22 12:43:05:782 LL1 LogManager.java:49 LL(1)? true
2016-08-22 12:43:05:782 LL1 LogManager.java:49 
DECISION 20 in rule targetcode
2016-08-22 12:43:05:782 LL1 LogManager.java:49 look=[21, null]
2016-08-22 12:43:05:782 LL1 LogManager.java:49 LL(1)? false
2016-08-22 12:43:05:782 LL1 LogManager.java:49 
DECISION 21 in rule targetcode
2016-08-22 12:43:05:782 LL1 LogManager.java:49 look=[8, null]
2016-08-22 12:43:05:782 LL1 LogManager.java:49 LL(1)? false
